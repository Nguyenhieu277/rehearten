// ReHearten Custom JavaScript

// Emotional state detection
const EmotionalAI = {
    emotions: ['happy', 'sad', 'angry', 'calm', 'excited', 'anxious', 'peaceful'],
    
    // Simulate emotion detection from text
    detectEmotion: function(text) {
        const emotionalKeywords = {
            happy: ['vui', 'h·∫°nh ph√∫c', 'tuy·ªát v·ªùi', 't·ªët', 'y√™u', 'th√≠ch'],
            sad: ['bu·ªìn', 't·ªá', 'kh√≥c', 'ƒëau l√≤ng', 'c√¥ ƒë∆°n'],
            angry: ['t·ª©c gi·∫≠n', 'b·ª±c', 'gh√©t', 't·ª©c', 'ƒëi√™n'],
            calm: ['b√¨nh tƒ©nh', 'th∆∞ gi√£n', 'y√™n t√¢m', '·ªïn ƒë·ªãnh'],
            excited: ['ph·∫•n kh√≠ch', 'h√°o h·ª©c', 'k√≠ch ƒë·ªông', 'h√†o h·ª©ng'],
            anxious: ['lo l·∫Øng', 'cƒÉng th·∫≥ng', 's·ª£', 'b·∫•t an'],
            peaceful: ['y√™n b√¨nh', 'thanh th·∫£n', 'tƒ©nh l·∫∑ng', 'h√≤a b√¨nh']
        };
        
        const lowerText = text.toLowerCase();
        let maxScore = 0;
        let detectedEmotion = 'calm';
        
        for (const [emotion, keywords] of Object.entries(emotionalKeywords)) {
            let score = 0;
            keywords.forEach(keyword => {
                if (lowerText.includes(keyword)) {
                    score += 1;
                }
            });
            
            if (score > maxScore) {
                maxScore = score;
                detectedEmotion = emotion;
            }
        }
        
        return detectedEmotion;
    },
    
    // Apply emotional styling to elements
    applyEmotionalStyling: function(element, emotion) {
        element.classList.remove(...this.emotions.map(e => `emotion-${e}`));
        element.classList.add(`emotion-${emotion}`);
    },
    
    // Generate emotional response
    generateEmotionalResponse: function(userEmotion) {
        const responses = {
            happy: "T√¥i r·∫•t vui khi th·∫•y b·∫°n h·∫°nh ph√∫c! üòä H√£y chia s·∫ª th√™m v·ªÅ ƒëi·ªÅu g√¨ khi·∫øn b·∫°n vui v·∫ª nh√©!",
            sad: "T√¥i hi·ªÉu c·∫£m gi√°c c·ªßa b·∫°n. ü§ó B·∫°n c√≥ mu·ªën chia s·∫ª th√™m v·ªÅ ƒëi·ªÅu g√¨ ƒëang l√†m b·∫°n bu·ªìn kh√¥ng?",
            angry: "T√¥i c√≥ th·ªÉ c·∫£m nh·∫≠n ƒë∆∞·ª£c s·ª± t·ª©c gi·∫≠n c·ªßa b·∫°n. üòî H√£y th·ª≠ h√≠t th·ªü s√¢u v√† k·ªÉ cho t√¥i nghe nh√©.",
            calm: "Th·∫≠t tuy·ªát khi b·∫°n c·∫£m th·∫•y b√¨nh tƒ©nh! üòå ƒê√¢y l√† tr·∫°ng th√°i t√¢m l√Ω r·∫•t t·ªët.",
            excited: "Wow! T√¥i c√≥ th·ªÉ c·∫£m nh·∫≠n ƒë∆∞·ª£c s·ª± ph·∫•n kh√≠ch c·ªßa b·∫°n! üöÄ ƒêi·ªÅu g√¨ khi·∫øn b·∫°n h√†o h·ª©ng v·∫≠y?",
            anxious: "T√¥i hi·ªÉu b·∫°n ƒëang lo l·∫Øng. üíô H√£y c√πng t√¥i t√¨m c√°ch ƒë·ªÉ b·∫°n c·∫£m th·∫•y tho·∫£i m√°i h∆°n nh√©.",
            peaceful: "C·∫£m gi√°c y√™n b√¨nh th·∫≠t tuy·ªát v·ªùi! ‚òÆÔ∏è B·∫°n c√≥ th·ªÉ chia s·∫ª b√≠ quy·∫øt ƒë·ªÉ duy tr√¨ tr·∫°ng th√°i n√†y kh√¥ng?"
        };
        
        return responses[userEmotion] || responses.calm;
    }
};

// Heart animation effects
function addHeartEffect(element) {
    element.classList.add('heart-pulse');
    setTimeout(() => {
        element.classList.remove('heart-pulse');
    }, 2000);
}

// Initialize ReHearten features when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    console.log('ReHearten AI Platform initialized! ‚ù§Ô∏è');
    
    // Add heart effect to logo
    const logo = document.querySelector('.navbar-logo');
    if (logo) {
        logo.addEventListener('click', function() {
            addHeartEffect(this);
        });
    }
    
    // Add emotional detection to chat inputs
    const chatInputs = document.querySelectorAll('input[type="text"], textarea');
    chatInputs.forEach(input => {
        input.addEventListener('input', function() {
            const emotion = EmotionalAI.detectEmotion(this.value);
            EmotionalAI.applyEmotionalStyling(this, emotion);
        });
    });
    
    // Add welcome message
    console.log('ü§ñ ReHearten AI: Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi n·ªÅn t·∫£ng AI tr√≠ tu·ªá c·∫£m x√∫c!');
});

// Export for use in other modules
window.ReHearten = {
    EmotionalAI,
    addHeartEffect
};

